name: Automatic Releases workflow sample
on:  
  # workflow_dispatch:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  
jobs:
  test:
    name: "Test the application"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup dotnet
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - name: Install dependencies
        run: dotnet restore
        working-directory: src
      - name: Build
        run: dotnet build
        working-directory: src
      - name: Test with the dotnet CLI
        run: dotnet test
        working-directory: src
  
  # print-status:
  #   name: logs
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Print values
  #       run: |
  #         echo ${{ github.ref }}
  #         echo ${{ github.event_name }}
  #         echo ${{ github.event.pull_request.merged }}

  create-release:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    name: "Create release"
    needs: test
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.changelog.outputs.tag }}
    steps:  
      - name: Checkout
        uses: actions/checkout@v3
      - name: Conventional Changelog Action
        id: changelog 
        uses: TriPSs/conventional-changelog-action@v3 
        with: 
          github-token: ${{ secrets.github_token }}
          output-file: "false" 
      - name: Create Release
        uses: actions/create-release@v1
        if: ${{ steps.changelog.outputs.skipped == 'false' }} 
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with: 
          tag_name: ${{ steps.changelog.outputs.tag }} 
          release_name: ${{ steps.changelog.outputs.tag }} 
          body: ${{ steps.changelog.outputs.clean_changelog }}
      
  publish-package-ghcr:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: create-release
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # Add your test steps here if needed...
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/primo391981/${{ vars.DEPARTMENT }}/${{ vars.APPLICATION_NAME }}
          tags: |
            type=semver,pattern={{raw}},value=${{ needs.create-release.outputs.tag }}
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{major}}.{{minor}}
          # tags: type=sha
      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build container
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
        
  publish-package-acr:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    # outputs:
    #   container_name: ${{ steps.set-container-name.outputs.container_name }}
    needs: create-release
    steps:
    # checkout the repo
    - name: 'Checkout Github Action'
      uses: actions/checkout@v3

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ vars.ACR_SERVER }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 'Build Push to ACR'
      run: |
        echo ${{ needs.create-release.outputs.tag }}
        docker build . -t ${{ vars.ACR_SERVER }}/${{ vars.DEPARTMENT }}/${{ vars.APPLICATION_NAME }}:${{ needs.create-release.outputs.tag }}
        docker push ${{ vars.ACR_SERVER }}/${{ vars.DEPARTMENT }}/${{ vars.APPLICATION_NAME }}:${{ needs.create-release.outputs.tag }} 
    # - name: 'Set output'
    #   id: set-container-name
    #   env:
    #     SECRET: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}
    #   run: |
    #     container=$(gpg --symmetric --batch --passphrase "$SECRET" --output - <(echo "${{ vars.ACR_SERVER }}/${{ vars.DEPARTMENT }}/${{ vars.APPLICATION_NAME }}:${{ needs.create-release.outputs.tag }}") | base64 -w0)
    #     echo "container_name=$container" >> "$GITHUB_OUTPUT"

    # - uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: 'poc-auto-package'
    #     images: '${{ vars.ACR_SERVER }}/${{ vars.DEPARTMENT }}/${{ vars.APPLICATION_NAME }}:${{ needs.create-release.outputs.tag }}'

  deploy-to-infra:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    needs: [publish-package-acr,create-release]
    steps:
    # checkout the repo
    - name: 'Checkout Github Action'
      uses: actions/checkout@v3

    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - uses: azure/docker-login@v1
      with:
        login-server: ${{ vars.ACR_NAME }}
        username: ${{ secrets.ACR_USERNAME }}
        password: ${{ secrets.ACR_PASSWORD }}

    - name: 'Deploy to Azure'
      # env:
      #   SECRET: ${{ secrets.PGP_SECRET_SIGNING_PASSPHRASE }}
      run: |
        container_name=${{ vars.ACR_SERVER }}/${{ vars.DEPARTMENT }}/${{ vars.APPLICATION_NAME }}:${{ needs.create-release.outputs.tag }}
        az deployment group create --resource-group RG-JMF-POC --template-file appservice.bicep --parameters appName=poc-auto-package acrName=${{ vars.ACR_NAME }} containerImage=$container_name
      working-directory: infrastructure
        
 
     